namespace WinRTInteropTools
{
    // Direct3D11
    [flags]
    enum Direct3D11CpuAccessFlag
    {
        AccessWrite = 0x10000L,
        AccessRead = 0x20000L
    };

    [flags]
    enum Direct3D11ResourceMiscFlag
    {
        GenerateMips = 0x1L,
        Shared = 0x2L,
        TextureCube = 0x4L,
        DrawIndirectArgs = 0x10L,
        BufferAllowRawViews = 0x20L,
        BufferStructured = 0x40L,
        ResourceClamp = 0x80L,
        SharedKeyedMutex = 0x100L,
        GdiCompatible = 0x200L,
        SharedNtHandle = 0x800L,
        RestrictedContent = 0x1000L,
        RestrictSharedResource = 0x2000L,
        RestrictSharedResourceDriver = 0x4000L,
        Guarded = 0x8000L,
        TilePool = 0x20000L,
        Tiled = 0x40000L,
        HwProtected = 0x80000L
    };

    struct Direct3D11Texture2DDescription
    {
        Windows.Graphics.DirectX.Direct3D11.Direct3DSurfaceDescription Base;
        Int32 MipLevels;
        Int32 ArraySize;
        Windows.Graphics.DirectX.Direct3D11.Direct3DUsage Usage;
        Windows.Graphics.DirectX.Direct3D11.Direct3DBindings BindFlags;
        Direct3D11CpuAccessFlag CpuAccessFlags;
        Direct3D11ResourceMiscFlag MiscFlags;
    };

    [default_interface]
    runtimeclass Direct3D11Device : Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice
    {
        Direct3D11Device();

        Direct3D11DeviceContext ImmediateContext{ get; };
        Direct3D11Multithread Multithread{ get; };

        Direct3D11Texture2D CreateTexture2D(
            Direct3D11Texture2DDescription description);
    }

    [default_interface]
    runtimeclass Direct3D11DeviceContext : Windows.Foundation.IClosable
    {
        void CopyResource(
            Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface destination,
            Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface source);
    }

    [default_interface]
    runtimeclass Direct3D11Texture2D : Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface
    {
        Direct3D11Texture2DDescription Description2D{ get; };

        static Direct3D11Texture2D CreateFromDirect3DSurface(
            Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface surface);
    }

    [default_interface]
    runtimeclass Direct3D11Multithread : Windows.Foundation.IClosable
    {
        Boolean IsMultithreadProtected{ get; set; };

        Windows.Foundation.IClosable Lock();
    }

    [default_interface]
    runtimeclass SwapChain : Windows.Foundation.IClosable
    {
        SwapChain(
            Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device,
            Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat,
            Int32 numberOfBuffers,
            Windows.Graphics.SizeInt32 size);

        Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface GetBuffer(
            Int32 bufferIndex);
        void Present();
        Windows.UI.Composition.ICompositionSurface CreateSurface(
            Windows.UI.Composition.Compositor compositor);
        void Resize(
            Windows.Graphics.DirectX.DirectXPixelFormat pixelFormat,
            Int32 numberOfBuffers,
            Windows.Graphics.SizeInt32 size);
    }

    // WIC
    [default_interface]
    runtimeclass ImageDecoder : Windows.Foundation.IClosable
    {
        ImageDecoder();

        Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface DecodeStreamIntoTexture(
            Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device,
            Windows.Storage.Streams.IRandomAccessStream stream);
    }
    
    // Media
    [default_interface]
    runtimeclass MediaGraphicsDevice : Windows.Foundation.IClosable
    {
        static MediaGraphicsDevice CreateFromMediaStreamSource(
            Windows.Media.Core.MediaStreamSource mediaStreamSource);

        Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice RenderingDevice{ get; set; };
    }
    
    // Composition
    [default_interface]
    runtimeclass CompositionGraphics
    {
        static Windows.UI.Composition.CompositionGraphicsDevice CreateCompositionGraphicsDevice(
            Windows.UI.Composition.Compositor compositor,
            Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device);

        static void CopyDirect3DSurfaceIntoCompositionSurface(
            Windows.Graphics.DirectX.Direct3D11.IDirect3DDevice device,
            Windows.Graphics.DirectX.Direct3D11.IDirect3DSurface d3dSurface,
            Windows.UI.Composition.CompositionDrawingSurface compositionSurface);

        [default_overload]
        static void ResizeSurface(
            Windows.UI.Composition.CompositionDrawingSurface compositionSurface,
            Windows.Foundation.Size size);

        static void ResizeSurface(
            Windows.UI.Composition.CompositionDrawingSurface compositionSurface,
            Windows.Graphics.SizeInt32 size);
    }
}
